(in-package :stumpwm)

;; Vim-ify menu
(setf *menu-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "Up") 'menu-up)
        (define-key m (kbd "Down") 'menu-down)
        (define-key m (kbd "SPC") 'menu-finish)
        (define-key m (kbd "RET") 'menu-finish)
        (define-key m (kbd "ESC") 'menu-abort)
        m))

(set-prefix-key (kbd "s-a"))
(define-key *root-map* (kbd "C-s") "secure-shell")
(define-key *root-map* (kbd "C-y") "show-clipboard-history")
(define-key *root-map* (kbd "s-f") "dump-group-to-file")
(define-key *root-map* (kbd "ESC") "abort")
;; Top map
(define-key *top-map* (kbd "s-B") "firefox")
(define-key *top-map* (kbd "s-b") "run-firefox")
(define-key *top-map* (kbd "s-RET") (format nil "exec ~a" *terminal*))
(define-key *top-map* (kbd "s-e") "emacs")
(define-key *top-map* (kbd "s-1") "global-windowlist")
(define-key *top-map* (kbd "s-2") "global-pull-windowlist")
(define-key *top-map* (kbd "s-3") "fullscreen-with-modeline")
(define-key *top-map* (kbd "s-4") "gmove-and-follow")
(define-key *top-map* (kbd "s-5") "resize-gaps")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "increase-volume")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "decrease-volume")
(define-key *top-map* (kbd "s-XF86AudioRaiseVolume") "gnext")
(define-key *top-map* (kbd "s-XF86AudioLowerVolume") "gprev")
(define-key *top-map* (kbd "C-XF86AudioRaiseVolume") "fnext")
(define-key *top-map* (kbd "C-XF86AudioLowerVolume") "fprev")
(define-key *top-map* (kbd "XF86AudioMute") "mute")
(define-key *top-map* (kbd "Pause") "loadrc")
(define-key *top-map* (kbd "s-BackSpace") "kill")
(define-key *top-map* (kbd "s-SPC") "scratchpad")
(define-key *top-map* (kbd "s-Insert") "paste-x-selection")
(define-key *top-map* (kbd "s-Tab") "next")
(define-key *top-map* (kbd "s-Home") "expose")
(define-key *top-map* (kbd "s-:") "eval")
(define-key *top-map* (kbd "s-;") "colon1")
(define-key *top-map* (kbd "s-x") "stumpish-term")
(define-key *top-map* (kbd "s-q") "logmenu")
(Define-key *top-map* (kbd "s-t") "quickslot")
(define-key *top-map* (kbd "s-f") "frame-menu")
(define-key *top-map* (kbd "s-W") "window-menu")
(define-key *top-map* (kbd "s-g") "group-menu")
(define-key *top-map* (kbd "s-v") "vsplit")
(define-key *top-map* (kbd "s-V") "hsplit")
(define-key *top-map* (kbd "s-r") "rotate-windows")
(define-key *top-map* (kbd "s-Up") "move-focus up")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Right") "move-focus right")

(define-key *top-map* (kbd "s-M-Up") "move-window up")
(define-key *top-map* (kbd "s-M-Down") "move-window down")
(define-key *top-map* (kbd "s-M-Left") "move-window left")
(define-key *top-map* (kbd "s-M-Right") "move-window right")
(define-key *top-map* (kbd "s-C-Left") "gprev")
(define-key *top-map* (kbd "s-C-Right") "gnext")

(define-key *top-map* (kbd "s-F1") "gselect 1")
(define-key *top-map* (kbd "s-F2") "gselect 2")
(define-key *top-map* (kbd "s-F3") "gselect 3")
(define-key *top-map* (kbd "s-F4") "gselect 4")
(define-key *top-map* (kbd "s-F5") "gselect 5")
(define-key *top-map* (kbd "s-F6") "gselect 6")
;(define-key *top-map* (kbd "s-F7") "gselect 7")
;(define-key *top-map* (kbd "s-F8") "gselect 8")
;(define-key *top-map* (kbd "s-F9") "gselect 9")
;(define-key *top-map* (kbd "s-F10") "gselect 10")
(define-key *top-map* (kbd "s-F11") "fullscreen")
;(define-key *top-map* (kbd "s-F12") "gselect 12")

(defvar *toggle-map* (make-sparse-keymap) "Map for Toggling command.")
(define-key *top-map* (kbd "s-.") '*toggle-map*)
(define-key *toggle-map* (kbd "g") "toggle-gaps")
(define-key *toggle-map* (kbd "f") "float-this")
(define-key *toggle-map* (kbd "u") "unfloat-this")
(define-key *toggle-map* (kbd "a") "toggle-always-show")
(define-key *toggle-map* (kbd "t") "toggle-always-on-top")
(define-key *toggle-map* (kbd "s") "swap-windows")
(define-key *toggle-map* (kbd "S") "toggle-split")

(defvar *app-map* nil "Application keymap")
(setf *app-map*
 (let ((m (make-sparse-keymap)))
    (define-key m (kbd "s") "new-shell-script")
    (define-key m (kbd "c") "cmus")
    (define-key m (kbd "e") "geary-email")
    (define-key m (kbd "t") "exec rofi-ps.sh")
    (define-key m (kbd "d") "exec rofi-df.sh")
    (define-key m (kbd "T") "rofi-theme-selector")
    (define-key m (kbd "i") "iftop")
    (define-key m (kbd "g") "glances")
    (define-key m (kbd "a") "app-menu")
    (define-key m (kbd "W") "window-menu")
    (define-key m (kbd "w") "rofi-window-current-group")
    (define-key m (kbd "RET") "rofi-bang")
    (define-key m (kbd "p") "software-manager")
    (define-key m (kbd "P") "software-updater")
    (define-key m (kbd "m") "mount-device")
    (define-key m (kbd "M") "manpage")
    (define-key m (kbd "ESC") "abort")
    m))
(define-key *top-map* (kbd "s-,") '*app-map*)

(defvar *frame-map* nil "Keymap for doing stuffs to frames")
(setf *frame-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "d")   "vsplit")
        (define-key m (kbd "D")   "hsplit")
        (define-key m (kbd "r")   "remove")
        (define-key m (kbd "s")   "iresize")
        (define-key m (kbd "y")   "toggle-split")
        (define-key m (kbd "m")   "pull-hidden-next")
        (define-key m (kbd "w")   "swap-windows")
	(define-key m (kbd "b")   "set-desktop-picture-full-screen")
	(define-key m (kbd "ESC") "abort")
        m))
(define-key *top-map* (kbd "s-Q") '*frame-map*)

;; some useful window/frame commands.
(defvar *win-frame-map*
  (let ((m (make-sparse-keymap)))
    (labels ((dk (m k c) (define-key m k c)))
    (dk m (kbd "r")   "remember")
    (dk m (kbd "f")   "forget")
    (dk m (kbd "p")   "place-existing-windows")
    (dk m (kbd "n")   "repack-window-numbers")
    (dk m (kbd "x")   "fix-height")
    (dk m (kbd "X")   "fix-width")
    (dk m (kbd "ESC") "abort")
   m)))
(define-key *top-map* (kbd "s-z") *win-frame-map*)

(defvar *ranger-map*
  (let ((m (make-sparse-keymap)))
    (labels ((dk (m k c) (define-key m k c)))
      (dk m (kbd "h") "ranger")
      (dk m (kbd "q") "ranger-quicklisp")
      (dk m (kbd "p") "ranger-projects")
      (dk m (kbd "v") "ranger-videos")
      (dk m (kbd "S") "ranger-stumpvm")
      (dk m (kbd "e") "ranger-entry")
      (dk m (kbd "s") "ranger-sudo-entry")
      (dk m (kbd "ESC") "abort")
      m)) "Ranger Key Map")
(define-key *top-map* (kbd "s-Z") *ranger-map*)

(defvar *emacs-map* nil
  "The Emacs map for launching emacsclient in dired-mode for certain directories ")
(setf *emacs-map*
      (let ((m (make-sparse-keymap)))
	(define-key m (kbd "h") "emacs-client")
	(define-key m (kbd "p") "emacs-projects")
	(define-key m (kbd "q") "emacs-quicklisp")
	(define-key m (kbd "e") "emacs-edit-config")
	(define-key m (kbd "s") "emacs-edit-stump-config")
	(define-key m (kbd ":") "emacs-entry")
	(define-key m (kbd "ESC") "abort")
	m))
(define-key *top-map* (kbd "s-E") *emacs-map*)

(defvar *cmus-map*
  (let ((m (make-sparse-keymap)))
    (labels ((dk (m k c) (define-key m k c)))
      (dk m (kbd "c") "cmus")
      (dk m (kbd "P") "play-song")
      (dk m (kbd "p") "pause-song")
      (dk m (kbd "s") "stop-song")
      (dk m (kbd "n") "next-song")
      (dk m (kbd "l") "prev-song")
      ;(dk m (kbd "XF86AudioPlay") "play-song")
      ;(dk m (kbd "s-XF86AudioPlay") "pause-song")
      ;(dk m (kbd "XF86AudioStop") "stop-song")
      ;(dk m (kbd "XF86AudioNext") "next-song")
      ;(dk m (kbd "XF86AudioPrev") "prev-song")
      (dk m (kbd "ESC") "abort")
      m)) "CMUS Music player commends")
(define-key *top-map* (kbd "s-C") *cmus-map*)

(defvar *xclip-clipboard-map*
  (let ((m (make-sparse-keymap)))
    (labels ((dk (m k c) (define-key m k c)))
    (dk m (kbd "b") "exec xclip -selection clipboard -o | xclip -selection buffer-cut -i")
    (dk m (kbd "p") "exec xclip -selection clipboard -o | xclip -selection primary -i")
    (dk m (kbd "s") "exec xclip -selection clipboard -o | xclip -selection secondary -i")
    (dk m (kbd ";") "prompt-xclip")
    (dk m (kbd ":") "echo-xclip")
    (dk m (kbd "ESC") "abort")
   m)) "Transfer contents of clipboard into other buffers, or manually type cmd.")
;(define-key *top-map* (kbd "s-c")    *xclip-primary-map*)

(defvar *xclip-primary-map*
  (let ((m (make-sparse-keymap)))
    (labels ((dk (m k c) (define-key m k c)))
    (dk m (kbd "b") "exec xclip -selection primary -o | xclip -selection buffer-cut -i")
    (dk m (kbd "c") "exec xclip -selection primary -o | xclip -selection clipboard -i")
    (dk m (kbd "s") "exec xclip -selection primary -o | xclip -selection secondary -i")
    (dk m (kbd ";") "prompt-xclip")
    (dk m (kbd ":") "echo-xclip")
    (dk m (kbd "ESC") "abort")
   m)))
;(define-key *top-map* (kbd "s-C")    *xclip-clipboard-map*)

(defvar *xsel-map*
  (let ((m (make-sparse-keymap)))
    (labels ((dk (m k c) (define-key m k c)))
    (dk m (kbd "c")   "copy-last-message")
    (dk m (kbd "g")   "getsel")
    (dk m (kbd "m")   "meta")
    (dk m (kbd "p")   "putsel")
    (dk m (kbd "s")   "window-send-string")
    (dk m (kbd "ESC") "abort")
  m)) "Interact with the xselection and meta commands.")
;(define-key *top-map* (kbd "s-X")    *xsel-map*)
